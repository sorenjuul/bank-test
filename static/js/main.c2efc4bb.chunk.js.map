{"version":3,"sources":["utils/api.js","utils/helper.js","components/Tags.js","components/ImageGrid.js","App.js","registerServiceWorker.js","index.js"],"names":["searchFlickr","searchTerm","page","a","async","fetch","response","json","data","getImageUrls","imageUrls","get","map","photoItem","url","farm","server","id","secret","title","total","Tags","state","inputVisible","inputValue","handleClose","removedTag","tags","props","filter","tag","handleChange","showInput","setState","input","focus","handleInputChange","e","target","value","handleInputConfirm","indexOf","saveInputRef","this","className","isLongTag","length","tagElem","key","closable","afterClose","slice","ref","type","size","style","width","onChange","onBlur","onPressEnter","onClick","background","borderStyle","Component","ImageGrid","loading","justify","align","item","xs","sm","md","lg","height","alt","src","display","margin","Header","Content","App","searchImages","stateTags","searchTags","join","formattedData","parseInt","paging","tagsChanged","padding","marginBottom","simple","current","pageSize","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c2efc4bb.chunk.js","sourcesContent":["export async function searchFlickr(searchTerm, page) {\n  let data;\n  try {\n    const response = await fetch(\n      `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=1794b363d1993ad0517ba5a03ed6f208&tags=${searchTerm}&sort=relevance&safe_search=1&is_getty=true&per_page=12&page=${page}&format=json&nojsoncallback=1`\n    );\n    data = await response.json();\n  } catch (error) {\n    //If the endpoint fails return a empty object\n    data = {};\n  }\n  return data;\n}\n","import get from 'lodash/get';\n\nexport function getImageUrls(data) {\n  const photo = get(data, 'photos.photo', []);\n  const imageUrls = photo.map(photoItem => {\n    return {\n      url: `https://farm${photoItem.farm}.staticflickr.com/${photoItem.server}/${photoItem.id}_${photoItem.secret}_q.jpg`,\n      id: photoItem.id,\n      title: photoItem.title,\n    };\n  });\n  return { imageUrls, total: get(data, 'photos.total', 0) };\n}\n","import React, { Component } from 'react';\nimport { Tag, Input, Tooltip, Icon } from 'antd';\n\nclass Tags extends Component {\n  state = {\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.props.tags.filter(tag => tag !== removedTag);\n    this.props.handleChange(tags);\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const inputValue = this.state.inputValue;\n    let tags = this.props.tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n\n    this.setState({\n      inputVisible: false,\n      inputValue: '',\n    });\n    this.props.handleChange(tags);\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  render() {\n    const { inputVisible, inputValue } = this.state;\n    const { tags } = this.props;\n    return (\n      <div className=\"tags\">\n        {tags.map(tag => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={true} afterClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n            tagElem\n          );\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Tags;\n","import React from 'react';\nimport { Card, Row, Col } from 'antd';\nimport size from 'lodash/size';\n\nfunction ImageGrid({ imageUrls, loading }) {\n  if (size(imageUrls) === 0) {\n    return null;\n  }\n\n  return (\n    <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n      {imageUrls.map(item => (\n        <Col key={item.id} xs={24} sm={12} md={8} lg={6}>\n          <Card title={item.title || 'No name'} loading={loading}>\n            <img\n              width=\"150px\"\n              height=\"150px\"\n              alt={item.title}\n              src={item.url}\n              style={{ display: 'block', margin: '0 auto' }}\n            />\n          </Card>\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nexport default ImageGrid;\n","import React, { Component } from 'react';\nimport { searchFlickr } from './utils/api';\nimport { getImageUrls } from './utils/helper';\nimport size from 'lodash/size';\nimport parseInt from 'lodash/parseInt';\nimport { Pagination, Layout } from 'antd';\nimport Tags from './components/Tags';\nimport ImageGrid from './components/ImageGrid';\nimport './App.css';\n\nconst { Header, Content } = Layout;\n\nclass App extends Component {\n  state = {\n    page: 1,\n    imageUrls: [],\n    loading: false,\n    total: 0,\n    tags: [],\n  };\n\n  searchImages = async (page, tags) => {\n    const { tags: stateTags } = this.state;\n    const searchTags = tags || stateTags;\n    // reset state if all tags have been deleted\n    if (size(searchTags) === 0) {\n      this.setState({\n        imageUrls: [],\n        page: 1,\n        total: 0,\n        tags: [],\n      });\n      return;\n    }\n    this.setState({\n      loading: true,\n      tags: searchTags,\n    });\n    //call API\n    const data = await searchFlickr(searchTags.join(','), page);\n    //get UI formatted data\n    const formattedData = getImageUrls(data);\n    this.setState({\n      imageUrls: formattedData.imageUrls,\n      loading: false,\n      page,\n      total: parseInt(formattedData.total),\n    });\n  };\n\n  paging = page => {\n    this.searchImages(page);\n  };\n\n  tagsChanged = tags => {\n    this.searchImages(1, tags);\n  };\n\n  render() {\n    const { imageUrls, loading, tags, page, total } = this.state;\n\n    return (\n      <div className=\"app\">\n        <Layout>\n          <Header className=\"header\">\n            <h1 className=\"header__title\">Bank Test</h1>\n          </Header>\n          <Content style={{ margin: '24px 16px 0' }}>\n            <div style={{ padding: 24 }}>\n              <h4 style={{ marginBottom: 16 }}>Search for tags on flickr:</h4>\n              <Tags handleChange={this.tagsChanged} tags={tags} />\n              {size(imageUrls) === 0 && size(tags) !== 0 && <h2>No results</h2>}\n              <ImageGrid imageUrls={imageUrls} loading={loading} />\n              {size(imageUrls) > 0 &&\n                !loading && (\n                  <div className=\"pagination\">\n                    <Pagination\n                      simple\n                      current={page}\n                      total={total}\n                      pageSize={12}\n                      onChange={this.paging}\n                    />\n                  </div>\n                )}\n            </div>\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}